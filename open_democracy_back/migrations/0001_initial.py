# Generated by Django 3.2.12 on 2022-06-30 14:05

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields
import open_democracy_back.models.contents_models
import uuid
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.search.index
import wagtail.snippets.blocks
from open_democracy_back.models.wagtailsvg import SvgChooserBlock


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0023_add_choose_permissions'),
        ('wagtaildocs', '0012_uploadeddocument'),
        ('wagtailcore', '0066_collection_management_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('locality_type', models.CharField(choices=[('municipality', 'Commune'), ('intercommunality', 'Intercommunalité')], default='municipality', max_length=32, verbose_name='Type de localité')),
                ('initiator_type', models.CharField(blank=True, choices=[('collectivity', 'La collectivité'), ('association', 'Une association')], max_length=32, null=True)),
                ('initialized_to_the_name_of', models.CharField(blank=True, help_text="Utile quand l'évaluation n'est pas initialisé par la collectivité", max_length=255, null=True, verbose_name='Initialisé au nom de')),
                ('public_initiator', models.BooleanField(default=False)),
                ('initialization_date', models.DateField(blank=True, help_text="Si il n'y a pas de date d'initialisation, c'est que le début de l'évaluation n'a pas été confirmée", null=True, verbose_name="Date d'initialisation")),
                ('is_initialization_questions_completed', models.BooleanField(default=False)),
                ('last_participation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date de dernière participation')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
            ],
            options={
                'verbose_name': 'Évaluation',
                'verbose_name_plural': 'Évaluations',
            },
        ),
        migrations.CreateModel(
            name='AssessmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_passed', models.BooleanField(default=False)),
                ('boolean_response', models.BooleanField(blank=True, null=True)),
                ('percentage_response', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('answered_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assessment_responses', to=settings.AUTH_USER_MODEL)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='open_democracy_back.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='AssessmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nom')),
                ('assessment_type', models.CharField(choices=[('quick', 'Diagnostic rapide'), ('participative', 'Evaluation participative'), ('with_expert', 'Evaluation avec experts')], max_length=32, unique=True, verbose_name='Evaluation géré par le code')),
                ('for_who', models.CharField(blank=True, max_length=510, verbose_name="A qui c'est adressé")),
                ('what', models.CharField(blank=True, max_length=510, verbose_name='Ce que ça contient')),
                ('for_what', models.CharField(blank=True, max_length=510, verbose_name='Ce que ça permet')),
                ('results', models.CharField(blank=True, max_length=510, verbose_name='Les résultats')),
                ('price', models.CharField(blank=True, max_length=510, verbose_name='Le prix')),
                ('pdf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document', verbose_name='Pdf du questionnaire')),
            ],
            options={
                'verbose_name': "Type d'évaluation",
                'verbose_name_plural': "Types d'évaluation",
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('category', models.CharField(default='', help_text='Permet de répondre à la même question pour différentes catégories', max_length=64, verbose_name='Categorie')),
            ],
            options={
                'verbose_name': 'Catégorie',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Description pour le référentiel', null=True, verbose_name='Description')),
                ('score_1', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 1')),
                ('score_2', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 2')),
                ('score_3', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 3')),
                ('score_4', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 4')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce critère dans son marqueur', max_length=2, verbose_name='Code')),
                ('concatenated_code', models.CharField(default='', max_length=8)),
                ('explanatory', wagtail.fields.StreamField([('category', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(label='Titre')), ('description', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul'], label='Description'))], label='Catégorie', label_format='Catégorie : {title}'))], blank=True, verbose_name='Explicatif du critère')),
            ],
            options={
                'verbose_name': '3. Critère',
                'verbose_name_plural': '3. Critères',
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=255, verbose_name='mot')),
                ('explanation', wagtail.fields.RichTextField(verbose_name='explication')),
            ],
            options={
                'verbose_name': 'Définition',
                'verbose_name_plural': 'Définitions',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('name', models.CharField(max_length=64, verbose_name='Nom')),
            ],
            options={
                'verbose_name': 'Département',
                'verbose_name_plural': 'Départements',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='EPCI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Code siren')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('population', models.IntegerField(default=0, verbose_name='Population')),
            ],
            options={
                'verbose_name': 'Intercommunalité',
                'verbose_name_plural': 'Intercommunalités',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='EvaluationInitPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', wagtail.fields.RichTextField(default='', help_text="Expliquer qu'aucune évaluation n'existe dans cette localité là, que des questions sur la vie politique de la ville précise seront posées, qu'il faut être connecté pour pouvoir initer une évaluation etc", verbose_name="Explication de l'initialisation")),
                ('public_name_question', models.TextField(default='', help_text="Question RGPD - La réponse est oui / non - Si l'évaluation est faite au nom d'une association alors c'est le nom de cette association qui sera affichée", verbose_name="Enoncé de la question sur la publication ou non du nom de l'initateur")),
                ('public_name_question_description', models.TextField(default='', help_text="Expliciter à l'utilisateur ce qu'implique ou non d'autoriser à publier son nom", verbose_name="Description de la question sur la publication ou non du nom de l'initateur")),
                ('representativity_title', models.TextField(default='', help_text="Correspond à la partie où seront posées les questions sur les seuils d'acceptabilité de la représentativité", verbose_name="Titre pour les questions sur les seuils d'acceptabilité de la représentativité")),
                ('representativity_description', wagtail.fields.RichTextField(default='', help_text='Permet à la personne de mieux comprendre les questions sur les représentativités, et lui donne des éléments de réponse', verbose_name='Description de la question sur la limite de représentativité')),
                ('initialization_validation', wagtail.fields.RichTextField(default='', help_text="S'affichera une fois l'initialisation de l'évaluation terminée", verbose_name="Texte de validation de l'initialisation d'une évaluation")),
            ],
            options={
                'verbose_name': "Initialisation d'une évaluation",
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EvaluationIntroPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('account_incentive_title', models.CharField(default='', max_length=68, verbose_name="Titre pour l'incitation à la connexion")),
                ('account_incentive', models.CharField(default='', max_length=255, verbose_name='Incitation à la connexion')),
                ('introduction', models.TextField(default='')),
                ('data_consent', wagtail.fields.RichTextField(default='', help_text='Demande de consentement à conserver les données personnelles demandées, RGPD', verbose_name='Consentement sur les données personnelles')),
            ],
            options={
                'verbose_name': "Intro à l'évaluation",
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='EvaluationQuestionnairePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('start_title', models.CharField(max_length=128, verbose_name='Titre')),
                ('start_text', models.TextField(default='', verbose_name='Texte')),
                ('intermediate_step_title', models.CharField(max_length=128, verbose_name='Titre')),
                ('is_intermediate_step_title_with_pillar_names', models.BooleanField(default=True, verbose_name='Afficher dans le titre le liste des piliers terminés')),
                ('intermediate_step_text_logged_in', models.TextField(default='', verbose_name='Texte pour un utilisateur connecté')),
                ('intermediate_step_text_logged_out', models.TextField(default='', verbose_name='Texte pour un utilisateur non connecté')),
                ('finished_title', models.CharField(max_length=128, verbose_name='Titre')),
                ('finished_text_logged_in', models.TextField(default='', verbose_name='Texte pour un utilisateur connecté')),
                ('finished_text_logged_out', models.TextField(default='', verbose_name='Texte pour un utilisateur non connecté')),
            ],
            options={
                'verbose_name': "Déroulement de l'évaluation",
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Marker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Description pour le référentiel', null=True, verbose_name='Description')),
                ('score_1', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 1')),
                ('score_2', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 2')),
                ('score_3', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 3')),
                ('score_4', models.TextField(blank=True, default='', help_text='Description pour le référentiel', verbose_name='Score = 4')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce marqueur dans son pilier', max_length=2, verbose_name='Code')),
                ('concatenated_code', models.CharField(default='', max_length=5)),
            ],
            options={
                'verbose_name': '2. Marqueur',
                'verbose_name_plural': '2. Marqueurs',
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Code insee')),
                ('name', models.CharField(max_length=255, verbose_name='Nom')),
                ('population', models.IntegerField(default=0, verbose_name='Population')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.department', verbose_name='Département')),
            ],
            options={
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Participation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consent', models.BooleanField(default=False)),
                ('is_profiling_questions_completed', models.BooleanField(default=False)),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='open_democracy_back.assessment')),
            ],
        ),
        migrations.CreateModel(
            name='Pillar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce pilier', max_length=2, verbose_name='Code')),
                ('order', models.IntegerField(default='1', help_text="Permet de ranger dans l'ordre voulu les piliers", verbose_name='Ordre')),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Description pour le référentiel', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': '1. Pilier',
                'verbose_name_plural': '1. Piliers',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=125)),
                ('rules_intersection_operator', models.CharField(choices=[('and', 'et'), ('or', 'ou')], default='and', max_length=8)),
            ],
            options={
                'verbose_name': 'Type de profil',
                'verbose_name_plural': 'Types de profil',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('rules_intersection_operator', models.CharField(choices=[('and', 'et'), ('or', 'ou')], default='and', max_length=8)),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de cette question, détermine son ordre', max_length=2, verbose_name='Code')),
                ('concatenated_code', models.CharField(default='', max_length=11)),
                ('name', models.CharField(default='', max_length=125, verbose_name='Nom')),
                ('question_statement', models.TextField(default='', verbose_name='Enoncé de la question')),
                ('mandatory', models.BooleanField(default=False, verbose_name='Obligatoire')),
                ('type', models.CharField(choices=[('open', 'Ouverte'), ('unique_choice', 'Choix unique'), ('multiple_choice', 'Choix multiple'), ('closed_with_scale', 'Fermée à échelle'), ('boolean', 'Binaire oui / non'), ('percentage', 'Pourcentage')], default='boolean', help_text='Choisir le type de question', max_length=32)),
                ('population_lower_bound', models.IntegerField(blank=True, help_text="Si aucune valeur n'est renseignée, aucune borne inférieur ne sera prise en compte", null=True, verbose_name='Borne inférieure (population min)')),
                ('population_upper_bound', models.IntegerField(blank=True, help_text="Si aucune valeur n'est renseignée, aucune borne suppérieur ne sera prise en compte", null=True, verbose_name='Borne suppérieur (population max)')),
                ('max_multiple_choices', models.IntegerField(blank=True, help_text='Pour une question à choix multiple, indiquer le nombre maximum de choix possible', null=True, verbose_name='Nombre maximal de choix possible')),
                ('description', wagtail.fields.RichTextField(blank=True, help_text='Texte précisant la question et pourquoi elle est posée.', null=True, verbose_name='Description')),
                ('comments', wagtail.fields.RichTextField(blank=True, help_text='Indication affichée uniquement pour les administrateurs.', null=True, verbose_name="Commentaires (pour l'interne)")),
                ('objectivity', models.CharField(choices=[('objective', 'Objective'), ('subjective', 'Subjective')], default='subjective', max_length=32, verbose_name='Objective / Subjective')),
                ('method', models.CharField(blank=True, choices=[('quantitative', 'Quantitative'), ('qualitative', 'Qualitative')], max_length=32, verbose_name='Methode')),
                ('profiling_question', models.BooleanField(default=False)),
                ('allows_to_explain', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='explained_by', to='open_democracy_back.question', verbose_name="Permet d'expliciter une autre question")),
                ('assessment_types', models.ManyToManyField(blank=True, related_name='questions', to='open_democracy_back.AssessmentType', verbose_name="Types d'évaluation concernés")),
                ('criteria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='open_democracy_back.criteria')),
                ('profiles', models.ManyToManyField(blank=True, related_name='questions_that_depend_on_me', to='open_democracy_back.ProfileType', verbose_name='Profils concernés')),
            ],
            options={
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=3, verbose_name='Code')),
                ('name', models.CharField(max_length=64, verbose_name='Nom')),
            ],
            options={
                'verbose_name': 'Région',
                'verbose_name_plural': 'Régions',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='RepresentativityCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nom')),
                ('min_rate', models.IntegerField(default=0, help_text='En dessous de ce taux (%) la publication des résultats est interdite', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Taux (en %) minimum acceptable pour la publication des résultats')),
            ],
            options={
                'verbose_name': 'Critère de représentativité',
                'verbose_name_plural': 'Critères de représentativité',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ThematicTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Thématique',
                'verbose_name_plural': 'Thématiques',
            },
        ),
        migrations.CreateModel(
            name='ZipCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='Code')),
                ('municipality', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='zip_codes', to='open_democracy_back.municipality', verbose_name='Municipalité')),
            ],
            options={
                'verbose_name': 'Code postal',
                'verbose_name_plural': 'Code postaux',
            },
        ),
        migrations.CreateModel(
            name='UsagePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('tag_line', models.CharField(default='', max_length=510, verbose_name="Phrase d'accroche")),
                ('introduction', wagtail.fields.RichTextField(default='', verbose_name='Introduction')),
                ('step_of_use_title', models.CharField(blank=True, help_text="Si ce champ est vide les étapes d'utilisation du DémoMètre ne s'afficheront pas", max_length=68, verbose_name='Titre')),
                ('step_of_use_intro', models.CharField(blank=True, max_length=510, verbose_name='Intro')),
                ('steps_of_use', wagtail.fields.StreamField([('step', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='Image')), ('title', wagtail.blocks.CharBlock(label='Titre')), ('description', wagtail.blocks.TextBlock(label='Description'))], label='Etape', label_format='Etape : {title}'))], blank=True, verbose_name="Etapes d'utilisation")),
                ('participate_block_title', models.CharField(blank=True, help_text="Si ce champ est vide les étapes d'utilisation du DémoMètre ne s'afficheront pas", max_length=68, verbose_name='Titre')),
                ('participate_block_intro', models.CharField(blank=True, max_length=510, verbose_name='Intro')),
                ('participate_left_paragraph', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de gauche')),
                ('participate_right_paragraph', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de droite')),
                ('start_assessment_block_title', models.CharField(blank=True, help_text="Si ce champ est vide les étapes d'utilisation du DémoMètre ne s'afficheront pas", max_length=68, verbose_name='Titre')),
                ('start_assessment_block_intro', models.CharField(blank=True, max_length=510, verbose_name='Intro')),
                ('start_assessment_block_data', wagtail.fields.StreamField([('assessment_type', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(label='Titre')), ('type', wagtail.blocks.ChoiceBlock(choices=[('quick', 'Diagnostic rapide'), ('participative', 'Evaluation participative'), ('with_expert', 'Evaluation avec experts')], label='Type')), ('pdf_button', wagtail.blocks.CharBlock(label='Label du bouton pour le pdf'))], label="Type d'évaluation", label_format='Evaluation : {title}'))], blank=True, help_text="Pour modifier le descriptif de chaque type d'évaluation il faut directement aller dans le type d'évaluation correspondant", verbose_name="Descriptif des différents types d'évaluation")),
                ('intro_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Page des utilisations possibles',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('description', models.TextField(blank=True, default='', help_text='Texte précisant le rôle (définition, exemple, reformulation).', null=True, verbose_name='Description du rôle')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
        ),
        migrations.CreateModel(
            name='ResponseChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('associated_score', models.IntegerField(blank=True, help_text='Si pertinant', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Score associé')),
                ('linearized_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Score associé linéarisé')),
                ('response_choice', models.CharField(default='', max_length=510, verbose_name='Réponse possible')),
                ('description', models.TextField(blank=True, default='', help_text="Texte précisant la réponse (définition, exemple, reformulation). Si la question est fermée à échelle la description ne s'affichera pas.", null=True, verbose_name='Description de la réponse')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_choices', to='open_democracy_back.question')),
            ],
            options={
                'verbose_name': 'Choix de réponse',
                'verbose_name_plural': 'Choix de réponse',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('publication_date', models.DateTimeField(default=datetime.datetime.now, help_text="Permet de trier l'ordre d'affichage des articles de blog", verbose_name='Date de publication')),
                ('short_description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description courte')),
                ('external_link', models.CharField(blank=True, max_length=300, null=True, verbose_name='lien externe')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
                ('pillars', models.ManyToManyField(blank=True, related_name='resources', to='open_democracy_back.Pillar', verbose_name='Piliers concernés')),
            ],
            options={
                'verbose_name': 'Ressource',
                'verbose_name_plural': 'Ressources',
                'ordering': ['-publication_date'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ReferentialPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', models.CharField(default='', max_length=255)),
                ('description', wagtail.fields.RichTextField(default='', verbose_name='Description')),
                ('pillar_block_title', models.CharField(blank=True, help_text="si ce champs est vide l'explication des piliers ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('pillar_block_left_content', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de gauche')),
                ('pillar_block_right_content', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de droite')),
                ('marker_block_title', models.CharField(blank=True, help_text="si ce champs est vide l'explication des marqueurs ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('marker_block_content', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Contenu')),
                ('criteria_block_title', models.CharField(blank=True, help_text="si ce champs est vide l'explication des critères d'évaluation ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('criteria_block_left_content', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de gauche')),
                ('criteria_block_right_content', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Paragraphe de droite')),
                ('pillar_block_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Référentiel',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='QuestionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('numerical_operator', models.CharField(blank=True, choices=[('<', '<'), ('>', '>'), ('<=', '<='), ('>=', '>='), ('!=', '!='), ('=', '=')], max_length=8, null=True)),
                ('numerical_value', models.IntegerField(blank=True, null=True)),
                ('boolean_response', models.BooleanField(blank=True, null=True)),
                ('conditional_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questionrule_that_depend_on_me', to='open_democracy_back.question', verbose_name='Filtre par question')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='open_democracy_back.question')),
                ('response_choices', models.ManyToManyField(to='open_democracy_back.ResponseChoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='question',
            name='roles',
            field=models.ManyToManyField(blank=True, help_text="Si aucun rôle n'est sélectionné c'est comme si tous l'étaient", to='open_democracy_back.Role', verbose_name='Rôles concernés'),
        ),
        migrations.CreateModel(
            name='ProjectPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('tag_line', models.CharField(default='', max_length=510, verbose_name="Phrase d'accroche")),
                ('introduction', wagtail.fields.RichTextField(blank=True, default='', verbose_name='Introduction')),
                ('why_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('why_block_data', wagtail.fields.StreamField([('richtext', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul'], label='Paragraphe')), ('image', wagtail.images.blocks.ImageChooserBlock(label='Image'))], blank=True, verbose_name='Texte')),
                ('objective_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('objective_block_data', wagtail.fields.StreamField([('objective', wagtail.blocks.StructBlock([('svg', SvgChooserBlock(help_text="Pour ajouter un SVG d'abord l'ajouter dans le menu SVG", label='Icon au format svg')), ('title', wagtail.blocks.CharBlock(label='Titre'))], label='Objectif', label_format='Objectif : {title}'))], blank=True, verbose_name='Les objectifs')),
                ('impact_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('impact_block_data', wagtail.fields.StreamField([('impact', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(label='Image')), ('title', wagtail.blocks.CharBlock(label='Titre'))], label='Impact', label_format='Impact : {title}'))], blank=True, verbose_name='Les impacts')),
                ('who_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('who_partner_sub_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Partenaires - titre')),
                ('who_partner_sub_block_data', wagtail.fields.StreamField([('group_partners', wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(label='Titre')), ('description', wagtail.blocks.CharBlock(label='Description')), ('partners', wagtail.blocks.ListBlock(wagtail.snippets.blocks.SnippetChooserBlock(open_democracy_back.models.contents_models.Partner)))], label='Type de partenaires', label_format='{title}'))], blank=True, verbose_name='Partenaires - contenu')),
                ('how_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc ne s'affichera pas", max_length=68, verbose_name='Titre')),
                ('how_block_data', wagtail.fields.StreamField([('title', wagtail.blocks.CharBlock(label='Titre')), ('richtext', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul'], label='Paragraphe')), ('step', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('svg', SvgChooserBlock(help_text="Pour ajouter un SVG d'abord l'ajouter dans le menu SVG", label='Icon au format svg')), ('title', wagtail.blocks.CharBlock(label='Titre')), ('richtext', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link', 'ol', 'ul'], label='Descriptif')), ('link', wagtail.blocks.CharBlock(label='Lien en savoir plus', required=False))]), label='Etapes', label_format='Carte : {title}'))], blank=True, verbose_name='Contenu')),
                ('intro_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
            ],
            options={
                'verbose_name': 'Page du projet',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProfileDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('numerical_operator', models.CharField(blank=True, choices=[('<', '<'), ('>', '>'), ('<=', '<='), ('>=', '>='), ('!=', '!='), ('=', '=')], max_length=8, null=True)),
                ('numerical_value', models.IntegerField(blank=True, null=True)),
                ('boolean_response', models.BooleanField(blank=True, null=True)),
                ('conditional_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profiledefinition_that_depend_on_me', to='open_democracy_back.question', verbose_name='Filtre par question')),
                ('profile_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='open_democracy_back.profiletype')),
                ('response_choices', models.ManyToManyField(to='open_democracy_back.ResponseChoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PercentageRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('associated_score', models.IntegerField(blank=True, help_text='Si pertinant', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Score associé')),
                ('linearized_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Score associé linéarisé')),
                ('lower_bound', models.IntegerField(help_text='Si la réponse est suppérieur ou égale à', verbose_name='Borne inférieure')),
                ('upper_bound', models.IntegerField(help_text='Si la réponse est inférieur ou égale à', verbose_name='Borne suppérieure')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='percentage_ranges', to='open_democracy_back.question')),
            ],
            options={
                'verbose_name': 'Score pour une fourcette donnée',
                'verbose_name_plural': 'Scores pour les différentes fourchettes',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, verbose_name='Nom')),
                ('height', models.IntegerField(default=60, help_text='Choisir la hauteur du logo (min 40px / max 120px)', validators=[django.core.validators.MinValueValidator(40), django.core.validators.MaxValueValidator(120)], verbose_name='Hauteur')),
                ('show_in_home_page', models.BooleanField(default=True, verbose_name="Afficher dans la page d'accueil")),
                ('logo_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image', verbose_name='Logo')),
            ],
            options={
                'verbose_name': 'Partenaire',
                'verbose_name_plural': 'Partenaires',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ParticipationResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_passed', models.BooleanField(default=False)),
                ('boolean_response', models.BooleanField(blank=True, null=True)),
                ('percentage_response', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('multiple_choice_response', models.ManyToManyField(related_name='multiple_choice_participationresponses', to='open_democracy_back.ResponseChoice')),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='open_democracy_back.participation')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participationresponses', to='open_democracy_back.question')),
                ('unique_choice_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unique_choice_participationresponses', to='open_democracy_back.responsechoice')),
            ],
            options={
                'unique_together': {('participation', 'question')},
            },
        ),
        migrations.CreateModel(
            name='ParticipationPillarCompleted',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('participation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.participation')),
                ('pillar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.pillar')),
            ],
        ),
        migrations.AddField(
            model_name='participation',
            name='is_pillar_questions_completed',
            field=models.ManyToManyField(through='open_democracy_back.ParticipationPillarCompleted', to='open_democracy_back.Pillar'),
        ),
        migrations.AddField(
            model_name='participation',
            name='profiles',
            field=models.ManyToManyField(related_name='participations', to='open_democracy_back.ProfileType'),
        ),
        migrations.AddField(
            model_name='participation',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participations', to='open_democracy_back.role'),
        ),
        migrations.AddField(
            model_name='participation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MunicipalityOrderByEPCI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('epci', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_municipalities_ordered', to='open_democracy_back.epci')),
                ('municipality', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.municipality', verbose_name='Commune')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MarkerOrderByRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('marker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.marker')),
                ('role', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_markers_ordered', to='open_democracy_back.role')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='marker',
            name='pillar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='markers', to='open_democracy_back.pillar'),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('tag_line', models.CharField(default='', max_length=255, verbose_name="Phrase d'accroche")),
                ('introduction', wagtail.fields.RichTextField(default='', verbose_name='Introduction')),
                ('intro_youtube_video_id', models.CharField(blank=True, help_text="Indiquer ici seulement l'id de la video youtube, celui-ci est indiqué dans l'url après 'v='. Exemple : pour https://www.youtube.com/watch?v=xMQMvVIB0vM renseigner xMQMvVIB0vM", max_length=15, null=True, verbose_name='Vidéo Youtube (id)')),
                ('feedback_block_title', models.CharField(blank=True, help_text="Si ce champ est vide les retours d'expérience ne s'afficheront pas sur l'accueil", max_length=68, verbose_name="Titre du bloc retours d'expérience")),
                ('feedback_block_intro', models.CharField(blank=True, max_length=255, verbose_name="Intro du bloc retours d'expérience")),
                ('blog_block_title', models.CharField(blank=True, help_text="Si ce champ est vide les articles de blog ne s'afficheront pas sur l'accueil", max_length=68, verbose_name='Titre du bloc Blog')),
                ('blog_block_intro', models.CharField(blank=True, max_length=255, verbose_name='Intro du bloc Blog')),
                ('resources_block_title', models.CharField(blank=True, help_text="Si ce champ est vide bloc Ressources ne s'afficheront pas sur l'accueil", max_length=68, verbose_name='Titre du bloc Ressources')),
                ('resources_block_intro', models.CharField(blank=True, max_length=255, verbose_name='Intro du bloc Ressources')),
                ('partner_block_title', models.CharField(blank=True, help_text="Si ce champ est vide le bloc Partenaires ne s'afficheront pas sur l'accueil", max_length=68, verbose_name='Titre du bloc Partenaires')),
                ('partner_block_intro', models.CharField(blank=True, max_length=255, verbose_name='Intro du bloc Partenaires')),
                ('intro_image', models.ForeignKey(blank=True, help_text="Si l'id d'une vidéo youtube est indiqué alors l'image ne sera pas affiché sur la page d'accueil", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
            ],
            options={
                'verbose_name': "Page d'accueil",
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person_name', models.CharField(max_length=64, verbose_name='Prénom et nom')),
                ('person_context', models.CharField(help_text='Exemple : Elu de Strasbourg, Membre de Démocratie Ouverte, Habitant de Toulouse ... ', max_length=64, verbose_name='Context de la personne')),
                ('quote', models.CharField(default='', max_length=255, verbose_name='Citation')),
                ('publish', models.BooleanField(default=False, verbose_name="Publier dans la page d'accueil")),
                ('picture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Photo')),
            ],
            options={
                'verbose_name': "Retour d'expériences",
                'verbose_name_plural': "Retours d'expériences",
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name='department',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.region', verbose_name='Région'),
        ),
        migrations.CreateModel(
            name='CriteriaDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('criteria', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_definition_ordered', to='open_democracy_back.criteria')),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.definition')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='criteria',
            name='marker',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='criterias', to='open_democracy_back.marker'),
        ),
        migrations.AddField(
            model_name='criteria',
            name='thematic_tags',
            field=models.ManyToManyField(blank=True, to='open_democracy_back.ThematicTag', verbose_name='Thématiques'),
        ),
        migrations.CreateModel(
            name='ClosedWithScaleCategoryResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closed_with_scale_response_categories', to='open_democracy_back.assessmentresponse')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closed_with_scale_category_responses', to='open_democracy_back.category')),
                ('participation_response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='closed_with_scale_response_categories', to='open_democracy_back.participationresponse')),
                ('response_choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.responsechoice')),
            ],
        ),
        migrations.AddField(
            model_name='category',
            name='question',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='open_democracy_back.question'),
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Title')),
                ('publication_date', models.DateTimeField(default=datetime.datetime.now, help_text="Permet de trier l'ordre d'affichage des articles de blog", verbose_name='Date de publication')),
                ('short_description', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Description courte')),
                ('external_link', models.CharField(blank=True, max_length=300, null=True, verbose_name='lien externe')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
                ('pillars', models.ManyToManyField(blank=True, related_name='blogposts', to='open_democracy_back.Pillar', verbose_name='Piliers concernés')),
            ],
            options={
                'verbose_name': 'Article de blog',
                'verbose_name_plural': 'Articles de blog',
                'ordering': ['-publication_date'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name='assessmentresponse',
            name='multiple_choice_response',
            field=models.ManyToManyField(related_name='multiple_choice_assessmentresponses', to='open_democracy_back.ResponseChoice'),
        ),
        migrations.AddField(
            model_name='assessmentresponse',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assessmentresponses', to='open_democracy_back.question'),
        ),
        migrations.AddField(
            model_name='assessmentresponse',
            name='unique_choice_response',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unique_choice_assessmentresponses', to='open_democracy_back.responsechoice'),
        ),
        migrations.CreateModel(
            name='AssessmentRepresentativity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acceptability_threshold', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name="Seuil d'acceptabilité")),
                ('assessment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representativites', to='open_democracy_back.assessment')),
                ('representativity_criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='representativites', to='open_democracy_back.representativitycriteria')),
            ],
        ),
        migrations.AddField(
            model_name='assessment',
            name='assessment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.assessmenttype', verbose_name="Type d'évaluation"),
        ),
        migrations.AddField(
            model_name='assessment',
            name='epci',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.epci', verbose_name='Intercommunalité'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='initiated_by_user',
            field=models.ForeignKey(blank=True, help_text="Si l'évaluation est initié au nom de la localité, quelqu'un peut tout de même être à la source", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='initiated_assessments', to=settings.AUTH_USER_MODEL, verbose_name='Initialisé par'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='municipality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.municipality', verbose_name='Commune'),
        ),
        migrations.CreateModel(
            name='ProfilingQuestion',
            fields=[
            ],
            options={
                'verbose_name': 'Question de Profilage',
                'verbose_name_plural': 'Questions de Profilage',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.question',),
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestion',
            fields=[
            ],
            options={
                'verbose_name': '4. Question',
                'verbose_name_plural': '4. Questions',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.question',),
        ),
        migrations.AddField(
            model_name='representativitycriteria',
            name='profiling_question',
            field=models.OneToOneField(limit_choices_to={'type': 'unique_choice'}, on_delete=django.db.models.deletion.CASCADE, related_name='representativity_criteria', to='open_democracy_back.profilingquestion', verbose_name='Question de profilage reliée'),
        ),
        migrations.AlterUniqueTogether(
            name='participation',
            unique_together={('user', 'assessment')},
        ),
        migrations.AlterUniqueTogether(
            name='assessmentresponse',
            unique_together={('assessment', 'question')},
        ),
    ]
