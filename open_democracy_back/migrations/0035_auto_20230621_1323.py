# Generated by Django 3.2.12 on 2023-06-21 13:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields


class Migration(migrations.Migration):

    dependencies = [
        ('open_democracy_back', '0034_rename_evaluationboardpage_participationboardpage'),
    ]

    operations = [
        migrations.AddField(
            model_name='assessmentresponse',
            name='number_response',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='participationresponse',
            name='number_response',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='profiledefinition',
            name='float_value',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='question',
            name='max_number_value',
            field=models.FloatField(blank=True, null=True, verbose_name='Valeur maximale du champ nombre'),
        ),
        migrations.AddField(
            model_name='question',
            name='min_number_value',
            field=models.FloatField(blank=True, null=True, verbose_name='Valeur minimale du champ nombre'),
        ),
        migrations.AddField(
            model_name='question',
            name='step_number_value',
            field=models.FloatField(blank=True, null=True, verbose_name='Granularité minimale du champ nombre (ex: 1, 0.1, 0.01, ...)'),
        ),
        migrations.AddField(
            model_name='questionrule',
            name='float_value',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='type',
            field=models.CharField(choices=[('open', 'Ouverte'), ('unique_choice', 'Choix unique'), ('multiple_choice', 'Choix multiple'), ('closed_with_scale', 'Fermée à échelle'), ('boolean', 'Binaire oui / non'), ('percentage', 'Pourcentage'), ('number', 'Nombre')], default='boolean', help_text='Choisir le type de question', max_length=32),
        ),
        migrations.CreateModel(
            name='NumberRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('associated_score', models.IntegerField(blank=True, help_text='Si pertinant', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Score associé')),
                ('linearized_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Score associé linéarisé')),
                ('lower_bound', models.FloatField(blank=True, help_text='Si la réponse est suppérieur ou égale à', null=True, verbose_name='Borne inférieure')),
                ('upper_bound', models.FloatField(blank=True, help_text='Si la réponse est inférieur ou égale à', null=True, verbose_name='Borne suppérieure')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='number_ranges', to='open_democracy_back.question')),
            ],
            options={
                'verbose_name': 'Score pour une fourcette donnée',
                'verbose_name_plural': 'Scores pour les différentes fourchettes',
                'ordering': ['sort_order'],
            },
        ),
    ]
