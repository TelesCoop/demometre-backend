# Generated by Django 3.2.11 on 2022-04-07 12:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields


class Migration(migrations.Migration):

    dependencies = [
        ('open_democracy_back', '0026_auto_20220406_1218'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='closedwithscalecategoryresponse',
            name='response_value',
        ),
        migrations.RemoveField(
            model_name='question',
            name='max',
        ),
        migrations.RemoveField(
            model_name='question',
            name='max_associated_score',
        ),
        migrations.RemoveField(
            model_name='question',
            name='max_label',
        ),
        migrations.RemoveField(
            model_name='question',
            name='min',
        ),
        migrations.RemoveField(
            model_name='question',
            name='min_associated_score',
        ),
        migrations.RemoveField(
            model_name='question',
            name='min_label',
        ),
        migrations.RemoveField(
            model_name='response',
            name='numerical_response',
        ),
        migrations.AddField(
            model_name='closedwithscalecategoryresponse',
            name='response_choice',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.responsechoice'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='response',
            name='percentage_response',
            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='question',
            name='max_multiple_choices',
            field=models.IntegerField(blank=True, help_text='Pour une question à choix multiple, indiquer le nombre maximum de choix possible', null=True, verbose_name='Nombre maximal de choix possible'),
        ),
        migrations.AlterField(
            model_name='question',
            name='type',
            field=models.CharField(choices=[('open', 'Ouverte'), ('unique_choice', 'Choix unique'), ('multiple_choice', 'Choix multiple'), ('closed_with_ranking', 'Fermée avec classement'), ('closed_with_scale', 'Fermée à échelle'), ('boolean', 'Binaire oui / non'), ('percentage', 'Pourcentage')], default='open', help_text='Choisir le type de question', max_length=32),
        ),
        migrations.AlterField(
            model_name='responsechoice',
            name='description',
            field=models.TextField(blank=True, default='', help_text="Texte précisant la réponse (définition, exemple, reformulation). Si la question est fermée à échelle la description ne s'affichera pas.", null=True, verbose_name='Description de la réponse'),
        ),
        migrations.CreateModel(
            name='PercentageRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('lower_bound', models.IntegerField(help_text='Si la réponse est suppérieur ou égale à', verbose_name='Borne inférieure')),
                ('upper_bound', models.IntegerField(help_text='Si la réponse est inférieur ou égale à', verbose_name='Borne suppérieure')),
                ('associated_score', models.IntegerField(help_text='Le score sera alors de', verbose_name='Score associé')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='percentage_ranges', to='open_democracy_back.question')),
            ],
            options={
                'verbose_name': 'Score pour une fourcette donnée',
                'verbose_name_plural': 'Scores pour les différentes fourchettes',
            },
        ),
    ]
