# Generated by Django 3.2.11 on 2022-02-21 07:34

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields
import wagtail.search.index


class Migration(migrations.Migration):

    dependencies = [
        ('open_democracy_back', '0010_auto_20220217_1350'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=125)),
            ],
            options={
                'verbose_name': 'Type de profil',
                'verbose_name_plural': 'Types de profil',
            },
        ),
        migrations.CreateModel(
            name='QuestionBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(default='', max_length=125)),
                ('question_statement', models.TextField(default='')),
                ('type', models.CharField(choices=[('open', 'Ouverte'), ('unique_choice', 'Choix unique'), ('multiple_choice', 'Choix multiple'), ('closed_with_ranking', 'Fermée avec classement'), ('closed_with_scale', 'Fermée à échelle'), ('boolean', 'Binaire oui / non'), ('numerical', 'Numérique')], default='open', help_text='Choisir le type de question', max_length=32)),
                ('min', models.IntegerField(blank=True, null=True, verbose_name='Valeur minimale')),
                ('max', models.IntegerField(blank=True, null=True, verbose_name='Valeur maximale')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de cette question, détermine son ordre', max_length=2, verbose_name='Code')),
                ('objectivity', models.CharField(choices=[('objective', 'Objective'), ('subjective', 'Subjective')], default='subjective', max_length=32)),
                ('method', models.CharField(blank=True, choices=[('quantitative', 'Quantitative'), ('qualitative', 'Qualitative')], max_length=32)),
                ('profiling_question', models.BooleanField(default=False)),
                ('criteria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.criteria')),
            ],
            options={
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='QuestionFilterByProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('intersection_operator', models.CharField(blank=True, choices=[('and', 'et'), ('or', 'ou')], max_length=8)),
                ('conditional_profile_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_that_depend_on_me', to='open_democracy_back.profiletype', verbose_name='Filtre par type de profile')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_filters_by_profile_type', to='open_democracy_back.questionbase')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RemoveField(
            model_name='profilingresponsechoice',
            name='profiling_question',
        ),
        migrations.RemoveField(
            model_name='question',
            name='criteria',
        ),
        migrations.DeleteModel(
            name='Profiling',
        ),
        migrations.DeleteModel(
            name='ProfilingResponseChoice',
        ),
        migrations.AlterField(
            model_name='questionfilter',
            name='conditional_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions_that_depend_on_me', to='open_democracy_back.questionbase', verbose_name='Filtre par question'),
        ),
        migrations.AlterField(
            model_name='questionfilter',
            name='question',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_filters', to='open_democracy_back.questionbase'),
        ),
        migrations.AlterField(
            model_name='responsechoice',
            name='question',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_choices', to='open_democracy_back.questionbase'),
        ),
        migrations.DeleteModel(
            name='Question',
        ),
        migrations.CreateModel(
            name='Profiling',
            fields=[
            ],
            options={
                'verbose_name': 'Question de Profilage',
                'verbose_name_plural': 'Questions de Profilage',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.questionbase',),
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': '4. Questions',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.questionbase',),
        ),
    ]
