# Generated by Django 5.0.6 on 2024-07-08 08:17

import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailsvg.blocks
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        (
            "open_democracy_back",
            "0058_criteria_explanatory_en_criteria_explanatory_fr_and_more",
        ),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="category",
            options={"ordering": ["sort_order"], "verbose_name": "Category"},
        ),
        migrations.AlterField(
            model_name="assessmenttype",
            name="assessment_type",
            field=models.CharField(
                choices=[
                    ("quick", "Diagnostic rapide"),
                    ("participative", "Evaluation participative"),
                    ("with_expert", "Evaluation avec expert"),
                ],
                editable=False,
                max_length=32,
                unique=True,
                verbose_name="type d'évaluation",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="category",
            field=models.CharField(
                default="",
                help_text="Permet de répondre à la même question pour différentes catégories",
                max_length=128,
                verbose_name="Category",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="category_en",
            field=models.CharField(
                blank=True,
                help_text="Permet de répondre à la même question pour différentes catégories",
                max_length=128,
                null=True,
                verbose_name="Category (en)",
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="category_fr",
            field=models.CharField(
                blank=True,
                help_text="Permet de répondre à la même question pour différentes catégories",
                max_length=128,
                null=True,
                verbose_name="Category (fr)",
            ),
        ),
        migrations.AlterField(
            model_name="profiledefinition",
            name="conditional_question",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_that_depend_on_me",
                to="open_democracy_back.question",
                verbose_name="Filter by question",
            ),
        ),
        migrations.AlterField(
            model_name="projectpage",
            name="how_block_data",
            field=wagtail.fields.StreamField(
                [
                    ("title", wagtail.blocks.CharBlock(label="Titre")),
                    (
                        "richtext",
                        wagtail.blocks.RichTextBlock(
                            features=["bold", "italic", "link", "ol", "ul"],
                            label="Paragraphe",
                        ),
                    ),
                    (
                        "step",
                        wagtail.blocks.ListBlock(
                            wagtail.blocks.StructBlock(
                                [
                                    (
                                        "svg",
                                        wagtailsvg.blocks.SvgChooserBlock(
                                            help_text="Pour ajouter un SVG d'abord l'ajouter dans le menu SVG",
                                            label="Icone au format svg",
                                        ),
                                    ),
                                    ("title", wagtail.blocks.CharBlock(label="Titre")),
                                    (
                                        "richtext",
                                        wagtail.blocks.RichTextBlock(
                                            features=[
                                                "bold",
                                                "italic",
                                                "link",
                                                "ol",
                                                "ul",
                                            ],
                                            label="Descriptif",
                                        ),
                                    ),
                                    (
                                        "link",
                                        wagtail.blocks.CharBlock(
                                            label="Lien en savoir plus", required=False
                                        ),
                                    ),
                                ]
                            ),
                            label="Etapes",
                            label_format="Carte : {title}",
                        ),
                    ),
                ],
                blank=True,
                verbose_name="Contenu",
            ),
        ),
        migrations.AlterField(
            model_name="projectpage",
            name="objective_block_data",
            field=wagtail.fields.StreamField(
                [
                    (
                        "objective",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "svg",
                                    wagtailsvg.blocks.SvgChooserBlock(
                                        help_text="Pour ajouter un SVG d'abord l'ajouter dans le menu SVG",
                                        label="Icone au format svg",
                                    ),
                                ),
                                ("title", wagtail.blocks.CharBlock(label="Titre")),
                            ],
                            label="Objectif",
                            label_format="Objectif : {title}",
                        ),
                    )
                ],
                blank=True,
                verbose_name="Les objectifs",
            ),
        ),
        migrations.AlterField(
            model_name="questionrule",
            name="conditional_question",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(class)s_that_depend_on_me",
                to="open_democracy_back.question",
                verbose_name="Filter by question",
            ),
        ),
        migrations.AlterField(
            model_name="referentialpage",
            name="criteria_block_title",
            field=models.CharField(
                blank=True,
                help_text="si ce champ est vide l'explication des critères d'évaluation ne s'affichera pas",
                max_length=68,
                verbose_name="Titre",
            ),
        ),
        migrations.AlterField(
            model_name="referentialpage",
            name="marker_block_title",
            field=models.CharField(
                blank=True,
                help_text="si ce champ est vide l'explication des marqueurs ne s'affichera pas",
                max_length=68,
                verbose_name="Titre",
            ),
        ),
        migrations.AlterField(
            model_name="referentialpage",
            name="pillar_block_title",
            field=models.CharField(
                blank=True,
                help_text="si ce champ est vide l'explication des piliers ne s'affichera pas",
                max_length=68,
                verbose_name="Titre",
            ),
        ),
        migrations.AlterField(
            model_name="usagepage",
            name="start_assessment_block_data",
            field=wagtail.fields.StreamField(
                [
                    (
                        "assessment_type",
                        wagtail.blocks.StructBlock(
                            [
                                ("title", wagtail.blocks.CharBlock(label="Titre")),
                                (
                                    "type",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("quick", "Diagnostic rapide"),
                                            (
                                                "participative",
                                                "Evaluation participative",
                                            ),
                                            ("with_expert", "Evaluation avec expert"),
                                        ],
                                        label="Type",
                                    ),
                                ),
                                (
                                    "pdf_button",
                                    wagtail.blocks.CharBlock(
                                        label="Nom du bouton pour le pdf"
                                    ),
                                ),
                            ],
                            label="Type d'évaluation",
                            label_format="Evaluation : {title}",
                        ),
                    )
                ],
                blank=True,
                help_text="Pour modifier le descriptif de chaque type d'évaluation il faut directement aller dans le type d'évaluation correspondant",
                verbose_name="Descriptif des différents types d'évaluation",
            ),
        ),
        migrations.AlterField(
            model_name="usagepage",
            name="steps_of_use",
            field=wagtail.fields.StreamField(
                [
                    (
                        "step",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "image",
                                    wagtail.images.blocks.ImageChooserBlock(
                                        label="Image"
                                    ),
                                ),
                                ("title", wagtail.blocks.CharBlock(label="Titre")),
                                (
                                    "description",
                                    wagtail.blocks.TextBlock(label="Description"),
                                ),
                            ],
                            label="Étape",
                            label_format="Étape : {title}",
                        ),
                    )
                ],
                blank=True,
                verbose_name="Etapes d'utilisation",
            ),
        ),
    ]
