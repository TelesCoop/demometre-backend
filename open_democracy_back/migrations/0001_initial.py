# Generated by Django 3.2.12 on 2022-03-03 14:57

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import modelcluster.fields
import uuid
import wagtail.core.fields
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0066_collection_management_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Criteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce critère dans son marqueur', max_length=2, verbose_name='Code')),
            ],
            options={
                'verbose_name': '3. Critère',
                'verbose_name_plural': '3. Critères',
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=255, verbose_name='mot')),
                ('explanation', wagtail.core.fields.RichTextField(verbose_name='explication')),
            ],
            options={
                'verbose_name': 'Définition',
                'verbose_name_plural': 'Définitions',
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', models.CharField(default='', max_length=255)),
            ],
            options={
                'verbose_name': "Page d'accueil",
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='Marker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce marqueur dans son pilier', max_length=2, verbose_name='Code')),
                ('description', wagtail.core.fields.RichTextField(blank=True, help_text='Description pour le référentiel', null=True, verbose_name='Description')),
                ('score_1', models.TextField(default='', help_text='Description pour le référentiel', verbose_name='Score = 1')),
                ('score_2', models.TextField(default='', help_text='Description pour le référentiel', verbose_name='Score = 2')),
                ('score_3', models.TextField(default='', help_text='Description pour le référentiel', verbose_name='Score = 3')),
                ('score_4', models.TextField(default='', help_text='Description pour le référentiel', verbose_name='Score = 4')),
            ],
            options={
                'verbose_name': '2. Marqueur',
                'verbose_name_plural': '2. Marqueurs',
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='Pillar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de ce pilier', max_length=2, verbose_name='Code')),
                ('description', wagtail.core.fields.RichTextField(blank=True, help_text='Description pour le référentiel', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': '1. Pilier',
                'verbose_name_plural': '1. Piliers',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ProfileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=125)),
                ('rules_intersection_operator', models.CharField(choices=[('and', 'et'), ('or', 'ou')], default='and', max_length=8)),
            ],
            options={
                'verbose_name': 'Type de profil',
                'verbose_name_plural': 'Types de profil',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('rules_intersection_operator', models.CharField(choices=[('and', 'et'), ('or', 'ou')], default='and', max_length=8)),
                ('code', models.CharField(help_text='Correspond au numéro (ou lettre) de cette question, détermine son ordre', max_length=2, verbose_name='Code')),
                ('name', models.CharField(default='', max_length=125)),
                ('question_statement', models.TextField(default='')),
                ('type', models.CharField(choices=[('open', 'Ouverte'), ('unique_choice', 'Choix unique'), ('multiple_choice', 'Choix multiple'), ('closed_with_ranking', 'Fermée avec classement'), ('closed_with_scale', 'Fermée à échelle'), ('boolean', 'Binaire oui / non'), ('numerical', 'Numérique')], default='open', help_text='Choisir le type de question', max_length=32)),
                ('min', models.IntegerField(blank=True, null=True, verbose_name='Valeur minimale')),
                ('max', models.IntegerField(blank=True, null=True, verbose_name='Valeur maximale')),
                ('description', wagtail.core.fields.RichTextField(blank=True, help_text='Texte précisant la question et pourquoi elle est posée.', null=True, verbose_name='Description')),
                ('legal_frame', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Cadre légal')),
                ('use_case', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name="Cas d'usage")),
                ('resources', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='Ressources')),
                ('comments', wagtail.core.fields.RichTextField(blank=True, help_text='Indication affichée uniquement pour les administrateurs.', null=True, verbose_name='Commentaires')),
                ('objectivity', models.CharField(choices=[('objective', 'Objective'), ('subjective', 'Subjective')], default='subjective', max_length=32)),
                ('method', models.CharField(blank=True, choices=[('quantitative', 'Quantitative'), ('qualitative', 'Qualitative')], max_length=32)),
                ('profiling_question', models.BooleanField(default=False)),
                ('criteria', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.criteria')),
            ],
            options={
                'ordering': ['code'],
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='ReferentialPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', models.CharField(default='', max_length=255)),
            ],
            options={
                'verbose_name': 'Référentiel',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ResponseChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('response_choice', models.CharField(default='', max_length=510, verbose_name='Réponse possible')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_choices', to='open_democracy_back.question')),
            ],
            options={
                'verbose_name': 'Choix de réponse',
                'verbose_name_plural': 'Choix de réponse',
            },
        ),
        migrations.CreateModel(
            name='ThematicTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
            ],
            options={
                'verbose_name': 'Thématique',
                'verbose_name_plural': 'Thématiques',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('numerical_operator', models.CharField(blank=True, choices=[('<', '<'), ('>', '>'), ('<=', '<='), ('>=', '>='), ('!=', '!='), ('=', '=')], max_length=8, null=True)),
                ('numerical_value', models.IntegerField(blank=True, null=True)),
                ('boolean_response', models.BooleanField(blank=True, null=True)),
                ('conditional_profile_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules_that_depend_on_me', to='open_democracy_back.profiletype', verbose_name='Filtre par type de profile')),
                ('conditional_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rules_that_depend_on_me', to='open_democracy_back.question', verbose_name='Filtre par question')),
                ('profile_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='definitions', to='open_democracy_back.profiletype')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_filters', to='open_democracy_back.question')),
                ('response_choices', models.ManyToManyField(to='open_democracy_back.ResponseChoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=125, verbose_name='Nom')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'verbose_name': 'Rôle',
                'verbose_name_plural': 'Rôles',
                'abstract': False,
                'unique_together': {('translation_key', 'locale')},
            },
        ),
        migrations.CreateModel(
            name='QuestionDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('definition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.definition')),
                ('question', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_definition_ordered', to='open_democracy_back.question')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='question',
            name='roles',
            field=models.ManyToManyField(blank=True, to='open_democracy_back.Role'),
        ),
        migrations.CreateModel(
            name='MarkerOrderByRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('marker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='open_democracy_back.marker')),
                ('role', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_markers_ordered', to='open_democracy_back.role')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='marker',
            name='pillar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.pillar'),
        ),
        migrations.AddField(
            model_name='criteria',
            name='marker',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='open_democracy_back.marker'),
        ),
        migrations.AddField(
            model_name='criteria',
            name='thematic_tags',
            field=models.ManyToManyField(blank=True, to='open_democracy_back.ThematicTag', verbose_name='Thématiques'),
        ),
        migrations.CreateModel(
            name='ProfilingQuestion',
            fields=[
            ],
            options={
                'verbose_name': 'Question de Profilage',
                'verbose_name_plural': 'Questions de Profilage',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.question',),
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestion',
            fields=[
            ],
            options={
                'verbose_name': '4. Question',
                'verbose_name_plural': '4. Questions',
                'abstract': False,
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('open_democracy_back.question',),
        ),
    ]
